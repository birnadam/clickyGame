{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","Container.js","Row.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","value","id","onClick","setClicked","alt","name","src","image","Nav","title","score","topscore","Wrapper","children","Title","Container","concat","fluid","Row","Column","size","split","map","join","count","rightwrong","App","state","friends","_this","clickedfriend","filter","friend","clicked","i","length","setState","sort","b","Math","random","_this2","this","components_Wrapper_Wrapper","components_Nav_Nav","components_Title_Title","src_Container","src_Row","src_Column","components_FriendCard_FriendCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uvDAeeA,SAZI,SAAAC,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACVC,MAAOL,EAAMM,GACbC,QAAS,kBAAMP,EAAMQ,WAAWR,EAAMM,MAEtCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,YCGxBC,SAVH,SAAAb,GAAK,OAEfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACXJ,EAAMc,OAETb,EAAAC,EAAAC,cAAA,oBAAYH,EAAMe,MAAlB,iBAAuCf,EAAMgB,SAA7C,QCJWC,SAFC,SAAAjB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMkB,YCE1CC,SAFD,SAAAnB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMkB,YCIrCE,EALG,SAAApB,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAiB,OAAcrB,EAAMsB,MAAQ,SAAW,KAClDtB,EAAMkB,WCGIK,EALH,SAAAvB,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,MAAAiB,OAAQrB,EAAMsB,MAAQ,SAAW,KAC5CtB,EAAMkB,WCOIM,EATA,SAAAxB,GACb,IAAMyB,EAAOzB,EAAMyB,KAAKC,MAAM,KAAKC,IAAI,SAAAF,GAAI,MAAI,OAASA,IAAMG,KAAK,KACnE,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWqB,GACbzB,EAAMkB,kBCKTW,SAAQ,GACRb,EAAW,EACXc,EAAa,wDAyGFC,6MArGbC,MAAQ,CACNC,UACAJ,QACAb,WACAc,gBAGFtB,WAAa,SAAAF,GAEX,IAAM2B,EAAUC,EAAKF,MAAMC,QAGrBE,EAAgBF,EAAQG,OAAO,SAAAC,GAAM,OAAIA,EAAO/B,KAAOA,IAI7D,GAAI6B,EAAc,GAAGG,QAAS,CAG5BT,EAAQ,EACRC,EAAa,gDACb,IAAK,IAAIS,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,IAClCN,EAAQM,GAAGD,SAAU,EAEvBJ,EAAKO,SAAS,CAAEX,eAChBI,EAAKO,SAAS,CAAEZ,UAChBK,EAAKO,SAAS,CAAER,iBAGX,GAAIJ,EAAQ,GAGjBM,EAAc,GAAGG,SAAU,EAI3BR,EAAa,2DADbD,EAEYb,IACVA,EAAWa,EACXK,EAAKO,SAAS,CAAEzB,cAIlBiB,EAAQS,KAAK,SAAUxC,EAAGyC,GAAK,MAAO,GAAMC,KAAKC,WAGjDX,EAAKO,SAAS,CAAER,YAChBC,EAAKO,SAAS,CAAEZ,UAChBK,EAAKO,SAAS,CAAEX,mBACX,CAELK,EAAc,GAAGG,SAAU,EAG3BT,EAAQ,EAGRC,EAAa,6DACbd,EAAW,GACXkB,EAAKO,SAAS,CAAEzB,aAChB,IAAK,IAAIuB,EAAI,EAAGA,EAAIN,EAAQO,OAAQD,IAClCN,EAAQM,GAAGD,SAAU,EAGvBL,EAAQS,KAAK,SAAUxC,EAAGyC,GAAK,MAAO,GAAMC,KAAKC,WAEjDX,EAAKO,SAAS,CAAER,YAChBC,EAAKO,SAAS,CAAEZ,UAChBK,EAAKO,SAAS,CAAEX,yFAIX,IAAAgB,EAAAC,KACP,OACE9C,EAAAC,EAAAC,cAAC6C,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAD,CACEnC,MAAM,iBACNC,MAAOgC,KAAKf,MAAMH,MAClBb,SAAU+B,KAAKf,MAAMhB,WAGvBf,EAAAC,EAAAC,cAAC+C,EAAD,KAAOjD,EAAAC,EAAAC,cAAA,YAAO4C,KAAKf,MAAMF,aAEzB7B,EAAAC,EAAAC,cAACgD,EAAD,KACElD,EAAAC,EAAAC,cAACiD,EAAD,KACGL,KAAKf,MAAMC,QAAQN,IAAI,SAAAU,GAAM,OAC5BpC,EAAAC,EAAAC,cAACkD,EAAD,CAAQ5B,KAAK,aACXxB,EAAAC,EAAAC,cAACmD,EAAD,CACEC,IAAKlB,EAAO/B,GACZE,WAAYsC,EAAKtC,WACjBF,GAAI+B,EAAO/B,GACXM,MAAOyB,EAAOzB,qBA7Fd4C,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZJC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.06a0fb1a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./FriendCard.css\";\r\n\r\nconst FriendCard = props => (\r\n  <div\r\n    className=\"card\"\r\n    value={props.id}\r\n    onClick={() => props.setClicked(props.id)}\r\n  >\r\n    <div className=\"img-container\">\r\n      <img alt={props.name} src={props.image} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default FriendCard; ","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => (\r\n\r\n  <nav className=\"navbar\">\r\n    <h1 className=\"brand\">\r\n      {props.title}\r\n    </h1>\r\n    <h1>Score: {props.score} | Top Score: {props.topscore} </h1>\r\n  </nav>\r\n);\r\n\r\nexport default Nav; ","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper; ","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\r\n\r\nexport default Title; ","import React from \"react\";\r\n\r\nconst Container = props =>\r\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Container; ","import React from \"react\";\r\n\r\nconst Row = props =>\r\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\r\n    {props.children}\r\n  </div>;\r\n\r\nexport default Row; ","import React from \"react\";\r\n\r\nconst Column = props => {\r\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\r\n  return (\r\n    <div className={size}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column; ","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Column from \"./Column\";\nimport friends from \"./friends.json\";\nimport \"./App.css\";\n\nlet count = 0;\nlet topscore = 0;\nlet rightwrong = \"Click away, but don't click the same character twice!\";\n\nclass App extends Component {\n  // Setting this.state\n  state = {\n    friends,\n    count,\n    topscore,\n    rightwrong\n  };\n\n  setClicked = id => {\n    // Making a copy of the array \n    const friends = this.state.friends;\n\n    // Filter for the clicked friend\n    const clickedfriend = friends.filter(friend => friend.id === id);\n\n    // If click value is already true for the one picked\n    // do the game over action\n    if (clickedfriend[0].clicked) {\n      // console.log(\"Correct Guesses: \" + count);\n      // console.log(\"Best Score: \" + topscore);\n      count = 0;\n      rightwrong = \"GG! You've already clicked this, you lose! :(\"\n      for (let i = 0; i < friends.length; i++) {\n        friends[i].clicked = false;\n      }\n      this.setState({ rightwrong });\n      this.setState({ count });\n      this.setState({ friends });\n\n      // Otherwise, if clicked = false, game continues\n    } else if (count < 11) {\n\n      // Set the one that's been clicked to true\n      clickedfriend[0].clicked = true;\n\n      // Increment\n      count++;\n      rightwrong = \"You pwn! You haven't clicked any twice, keep going! :)\";\n      if (count > topscore) {\n        topscore = count;\n        this.setState({ topscore });\n      }\n\n      // Shuffle the array, rendering cards in different locations\n      friends.sort(function (a, b) { return 0.5 - Math.random() });\n\n      // Set this.state.friends equal to the new friends array\n      this.setState({ friends });\n      this.setState({ count });\n      this.setState({ rightwrong });\n    } else {\n\n      clickedfriend[0].clicked = true;\n\n      // Restart the counter\n      count = 0;\n\n      // Challenge the user to go again\n      rightwrong = \"You think you're hot stuff? Bet you can't do it again! ._.\";\n      topscore = 12;\n      this.setState({ topscore });\n      for (let i = 0; i < friends.length; i++) {\n        friends[i].clicked = false;\n      }\n\n      friends.sort(function (a, b) { return 0.5 - Math.random() });\n\n      this.setState({ friends });\n      this.setState({ count });\n      this.setState({ rightwrong });\n    }\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Nav\n          title='ST Memory Game'\n          score={this.state.count}\n          topscore={this.state.topscore}\n        />\n\n        <Title><span>{this.state.rightwrong}</span></Title>\n\n        <Container>\n          <Row>\n            {this.state.friends.map(friend => (\n              <Column size=\"md-3 sm-4\">\n                <FriendCard\n                  key={friend.id}\n                  setClicked={this.setClicked}\n                  id={friend.id}\n                  image={friend.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}